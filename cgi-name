#! /bin/sh

# designed by Nobuaki Tounaka
# written by richmikan

# print the usage and exit
print_usage_and_exit () {
  cat <<-USAGE 1>&2
	Usage   : ${0##*/} [-e<c>] [-s<c>] [-n<string>] [--template <html>] <param_file>
	Version : 2017-01-31 13:57:29 JST
	        : Open usp Tukubai (POSIX.1 Bourne Shell/POSIX.1 commands)
	USAGE
  exit 1
}

# initialize
set -u
export LC_ALL=C
export PATH="$(command -p getconf PATH):${PATH:-}"
eopt=''
eopt_is_set=0
sopt=''
sopt_is_set=0
nopt=''
tmplfile=''
tmplvars=''
tmpl_file=''
param_file=''
use_stdin=0
LFs=$(printf '\\\n_'); LFs=${LFs%_}

# parse arguments
case $# in [!0]*)
  optmode=''
  i=0
  for arg in "$@"; do
    i=$((i+1))
    case "$optmode" in '')
      case "$arg" in
        -e*)
          optmode='e'
          s=$(printf '%s' "${arg#??}_" | dd bs=1 count=2 2>/dev/null)
          arg=${s%?}
          eopt_is_set=1
          ;;
        -[sd]*)
          optmode='s'
          s=$(printf '%s' "${arg#??}_" | dd bs=1 count=2 2>/dev/null)
          arg=${s%?}
          sopt_is_set=1
          ;;
        -[ni]*)
          optmode='n'
          arg=${arg#-[ni]}
          case "$arg" in '') continue;; esac
          ;;
        --template)
          optmode='tmpl'
          continue
          ;;
        *)
          [ $i -eq $# ] || print_usage_and_exit
          optmode='param'
          ;;
      esac
      ;;
    esac
    case "$optmode" in
      e)     eopt=$arg
             optmode=''
             ;;
      s)     sopt=$arg
             optmode=''
             ;;
      n)     nopt=$arg
             optmode=''
             ;;
      tmpl)  tmpl_file=$arg
             optmode=''
             ;;
      param) param_file=$arg
             optmode=''
             ;;
    esac
  done
  ;;
esac
case "$param_file" in '') param_file='-';; esac
case "$param_file" in '-'|'/dev/stdin'|'/dev/fd/0'|'/proc/self/fd/0')
  use_stdin=$((use_stdin+1));;
esac
case "$tmpl_file"  in '-'|'/dev/stdin'|'/dev/fd/0'|'/proc/self/fd/0')
  use_stdin=$((use_stdin+1));;
esac
if [ $use_stdin -gt 1 ]; then print_usage_and_exit; fi
case "$tmpl_file"  in ''|-|/*|./*|../*) :;; *)  tmpl_file="./$tmpl_file" ;; esac
case "$param_file" in ''|-|/*|./*|../*) :;; *) param_file="./$param_file";; esac
[ ! -f "$param_file"     ] &&
[ ! -c "$param_file"     ] &&
[ ! -p "$param_file"     ] &&
[ "_$param_file" != '_-' ] && {
  print_usage_and_exit
}
[ ! -r "$param_file" ] && [ "_$param_file" != '_-' ] && {
  printf '%s\n' "${0##*/}: Cannot open the file as a param_file" 1>&2
  exit 1
}

# operate the --template option
if [ -f "$tmpl_file"      ] ||
   [ -c "$tmpl_file"      ] ||
   [ -p "$tmpl_file"      ] ||
   [ "_$tmpl_file" = '_-' ]   ;
then
  [ ! -r "$tmpl_file" ] && [ "_$tmpl_file" != '_-' ] && {
    printf '%s\n' "${0##*/}: Cannot open the file as a template file" 1>&2
    exit 1
  }
  tmplvars=$(cat "$tmpl_file"                                               |
             tr '\r\n' '  '                                                 |
             grep ^                                                         |
             sed 's/\(<[Ii][Nn][Pp][Uu][Tt] [^>]*>\)/'"$LFs"'\1'"$LFs"'</g' |
             grep     '<[Ii][Nn][Pp][Uu][Tt] '                              |
             grep -iE ' type=["'"'"']?(radio\>|checkbox\>)'                 |
             grep -iE ' name="[^"]*"| name='"'"'[^'"'"']*'"'"'| name=[^ ] ' |
             sed 's/^.*[Nn][Aa][Mm][Ee]="\([^"]*\)".*$/\1/'                 |
             sed 's/^.*[Nn][Aa][Mm][Ee]='"'"'\([^'"'"']*\)'"'"'.*$/\1/'     |
             sed 's/^.*[Nn][Aa][Mm][Ee]=\([^ ]*\) .*$/\1/'                  |
             grep -v  '[^][A-Za-z0-9_.:-]'                                  |
             sort                                                           |
             uniq                                                           |
             tr '\n' ' '                                                    |
             sed 's/ $//' 2>/dev/null || :                                  )
elif [ -n "$tmpl_file" ]; then
  print_usage_and_exit
fi

# transfer the CGI variables string to the "cgi-name format"
export   eopt eopt_is_set   sopt sopt_is_set   nopt   tmplvars
cat "$param_file"                                                    |
sed 's/\(%[0-9A-Fa-f][0-9A-Fa-f]\)/'"$LFs"'\1'"$LFs"'/g' 2>/dev/null |
sed '/^%/y/abcdef/ABCDEF/'                                           |
tr -d '\n'                                                           |
grep ^                                                               |
case $eopt_is_set in                                                 #
  0) cat                                 ;;                          #
  *) sed 's/%5C/\\/g' | sed 's/\\/\\\\/g';;                          #
esac                                                                 |
sed 's/%0D%0A/\\n/g'                                                 |
sed 's/&/'"$LFs"'/g'                                                 |
sed 's/+/ /g'                                                        |
grep '^[^=]\{1,\}='                                                  |
exec awk '
BEGIN {
  for (i = 0; i < 256; i++) {
    s = sprintf("%02X",i);
    chr[s] = sprintf("%c",i);
  }
  eopt        = ENVIRON["eopt"       ];
  eopt_is_set = ENVIRON["eopt_is_set"];
  if (eopt_is_set==1 && eopt=="") {eopt="\\";}
  sopt        = ENVIRON["sopt"       ];
  sopt_is_set = ENVIRON["sopt_is_set"];
  nopt        = ENVIRON["nopt"       ];
  tmplvars    = ENVIRON["tmplvars"   ];
  split(tmplvars, array0);
  for (var in array0) { tmplvar[array0[var]]=""; }
  split("", array0);
}
{
  # separate key and value(contains %XX)
  i    = index($0,"=");
  key  = substr($0,1  ,i-1);
  val0 = substr($0,i+1    );
  val  = "";

  # convert the value(contains %XX) into the value (not contains %XX)
  while (match(val0,/%[0-9A-F][0-9A-F]/)) {
    hex  = substr(val0, RSTART+1, 2);
    val  = val substr(val0, 1, RSTART-1) chr[hex];
    val0 = substr(val0, RSTART+3);
  }
  val = val val0;

  # treat the val for option "-e", "-s", "-n"
  if (val == "") {
    # [A] val is null
    # 1) set default value (nopt) if the val is not set and nopt is set
    if (nopt != "") {val=nopt;}
  } else {
    # [B] val is set
    # 1) escape the charater which is set by eopt if eopt is set
    if ((eopt_is_set) && (eopt!="\\")) {
      s = "";
      while (1) {
        i   = index(val,eopt);
        if (i==0) {break;}
        s   = s substr(val, 1  , i-1) "\\" eopt;
        val =   substr(val, i+1     )          ;
      }
      val = s val;
    }
    # 2) replace " " into the string which is set by sopt if sopt is set
    if (sopt_is_set) {
      s = "";
      while (1) {
        i   = index(val," ");
        if (i==0) {break;}
        s   = s substr(val, 1  , i-1) sopt;
        val =   substr(val, i+1     )     ;
      }
      val = s val;
    }
  }

  # delete the key from complement keys for the option "--template"
  if (key in tmplvar) {delete tmplvar[key];}

  # print key and value
  if (val!="") {print key, val;} else {print key;}
}
END {
  if (nopt != "") {
    for (var in tmplvar) {print var, nopt;}
  } else {
    for (var in tmplvar) {print var      ;}
  }
}
'
